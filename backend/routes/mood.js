const express = require('express');
const router = express.Router();
// Assuming Anime model is correctly imported
const Anime = require('../models/Anime'); 

// Updated mood-to-genres mapping
const moodGenresMap = {
Â  // ðŸŽ­ Emotional Moods
Â  'feel-good-vibes': ['Slice of Life', 'Comedy', 'Family'],
Â  'tearjerker-nights': ['Drama', 'Romance', 'Tragedy'],
Â  'chill-cozy': ['Slice of Life', 'Iyashikei', 'Comedy'],
Â  'adrenaline-rush': ['Action', 'Sports', 'Shounen'],
Â  'mind-bender': ['Psychological', 'Mystery', 'Thriller'],
Â  'romantic-feels': ['Romance',],
Â  // ðŸŒŒ Atmosphere Moods
Â  'dreamscape': ['Fantasy', 'Isekai', 'Adventure'],
Â  'dark-gritty': ['Horror', 'Seinen', 'Thriller'],
Â  'nostalgia-lane': ['Kids', 'Family', 'Adventure'],
Â  'epic-journeys': ['Adventure', 'Fantasy', 'Action'],
Â  'laugh-out-loud': ['Comedy', 'Parody', 'Slice of Life'],
Â  'calm-before-sleep': ['Slice of Life', 'Iyashikei', 'Drama'],
Â  // ðŸŽ¶ Energy-Based Moods
Â  'high-energy': ['Shounen', 'Action', 'Sports'],
Â  'slow-burn': ['Drama', 'Slice of Life', 'Romance'],
Â  'aesthetic-mood': ['Award Winning', 'Slice of Life', 'Drama'],
Â  'cozy-rainy-day': ['Slice of Life', 'Iyashikei', 'Drama']
};

// Define the size of the results segment and the total pool size
const SEGMENT_SIZE = 500;
const TOTAL_POOL_SIZE = 5000; // Total count of anime we want to query from
const RESULTS_PER_PAGE = 20; // Number of final results to show per page/request

router.get('/:mood', async (req, res) => {
Â  // Normalize mood string to match keys
Â  const normalizedMood = req.params.mood.toLowerCase().replace(/\s|_/g, '-');
Â  const genres = moodGenresMap[normalizedMood] || ['Slice of Life'];
Â  Â  
Â  // Get the current segment number (page 1 is segment 1)
Â  const page = parseInt(req.query.page, 10) || 1; 
Â  Â  
// ----------------------------------------------------------------------
// 1. CALCULATE INDEX COUNT RANGE
// ----------------------------------------------------------------------
Â  // The index starts from 1 (based on the import script), so page 1 starts at 1.
Â  const startIndex = (page - 1) * SEGMENT_SIZE + 1; // e.g., page 1: 1, page 2: 501
Â  const endIndex = page * SEGMENT_SIZE;             // e.g., page 1: 500, page 2: 1000

Â  // Prevent fetching beyond the total desired pool size
Â  if (startIndex > TOTAL_POOL_SIZE) {
Â  Â  return res.json({ 
Â  Â  Â  mood: normalizedMood, 
Â  Â  Â  page,
Â  Â  Â  anime: [] // Return empty array if we've exhausted the pool
Â  Â  });
Â  }

Â  try {
Â  Â  // Define the MongoDB Aggregation Pipeline
Â  Â  const pipeline = [
Â  Â  Â  // 1. Match: Filter by genres, active status, and the Index count segment
Â  Â  Â  {
Â  Â  Â  Â  $match: {
Â  Â  Â  Â  Â  genres: { $in: genres },
Â  Â  Â  Â  Â  isActive: true,
Â  Â  Â  Â  Â  // Use your custom count field for segmentation
Â  Â  Â  Â  Â  Indexcountfordatabase: { 
Â  Â  Â  Â  Â  Â  $gte: startIndex, 
Â  Â  Â  Â  Â  Â  $lte: endIndex 
Â  Â  Â  Â  Â  } 
Â  Â  Â  Â  }
Â  Â  Â  },
Â  Â  Â  // 2. Sample: Select a truly random subset of 20 documents from the matched segment
Â  Â  Â  {
Â  Â  Â  Â  $sample: { size: RESULTS_PER_PAGE }
Â  Â  Â  },
Â  Â  Â  // 3. Project: Select (include) only the necessary fields
Â  Â  Â  {
Â  Â  Â  Â  $project: {
Â  Â  Â  Â  Â  title: 1, 
Â  Â  Â  Â  Â  description: 1, 
Â  Â  Â  Â  Â  coverImage: 1, 
Â  Â  Â  Â  Â  bannerImage: 1, 
Â  Â  Â  Â  Â  images: 1, 
Â  Â  Â  Â  Â  year: 1, 
Â  Â  Â  Â  Â  status: 1, 
Â  Â  Â  Â  Â  genres: 1, 
Â  Â  Â  Â  Â  score: 1, 
Â  Â  Â  Â  Â  popularity: 1, 
Â  Â  Â  Â  Â  views: 1, 
Â  Â  Â  Â  Â  likes: 1, 
Â  Â  Â  Â  Â  dummyViews: 1, 
Â  Â  Â  Â  Â  dummyLikes: 1, 
Â  Â  Â  Â  Â  _id: 1 // Important for Mongoose and client routing
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  ];

Â  Â  // Execute the aggregation pipeline
Â  Â  const animeList = await Anime.aggregate(pipeline);

Â  Â  return res.json({ 
Â  Â  Â  Â  mood: normalizedMood, 
Â  Â  Â  Â  genres, 
Â  Â  Â  Â  page,
Â  Â  Â  Â  startIndex, 
Â  Â  Â  Â  endIndex,
Â  Â  Â  Â  anime: animeList 
Â  Â  });
Â  Â  
Â  } catch (error) {
Â  Â  console.error('Error fetching anime for mood:', error);
Â  Â  return res.status(500).json({ error: 'Failed to fetch anime for mood.' });
Â  }
});

module.exports = router;